{"version":3,"sources":["reducers/reducers.js","reducers/reducer.js","components/NavigationBar.react.js","components/MarkdownEditor.react.js","components/Home.react.js","components/Reader.react.js","App.js","registerServiceWorker.js","index.js"],"names":["reducers","default","state","arguments","length","undefined","type","NavigationBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","input","redirect","setState","_this2","react_default","a","createElement","react_bootstrap_es","inverse","collapseOnSelect","staticTop","Header","Brand","react_router_dom_es","to","process","Toggle","Collapse","pullRight","eventKey","href","placeholder","value","onChange","e","target","onKeyUp","key","dispatch","push","React","Component","connect","Markdown","require","Web3","initialSource","web3","givenProvider","hexEncode","text","unescape","encodeURIComponent","i","hc","lc","hex","charCodeAt","MarkdownEditor","context","genTransaction","eth","getAccounts","error","accounts","data","display","estimateGas","err","gas","sendTransaction","from","utils","toWei","hash","modal_title","modal_body","message","modal_show","onClick","_getInputPanel","currentProvider","Heading","className","bsStyle","Body","id","rows","name","_onChange","alt","style","width","src","handleClose","bind","assertThisInitialized","event","preventDefault","sm","md","source","skipHtml","escapeHtml","show","onHide","closeButton","Title","Footer","Home","MarkdownEditor_react","hex2utf8","toUpperCase","cc","indexOf","String","fromCharCode","decodeURIComponent","escape","providers","HttpProvider","Reader","content","newProps","getTransaction","match","params","txid","transaction","toString","substring","_this3","disqusConfig","url","window","location","identifier","title","xs","smOffset","xsOffset","Reader_react_Markdown","lib_default","DiscussionEmbed","shortname","config","history","createHistory","middleware","routerMiddleware","store","createStore","combineReducers","objectSpread","router","routerReducer","applyMiddleware","App","es","react_router_redux_es","NavigationBar_react","path","exact","component","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","src_App","document","getElementById","URL","origin","addEventListener","concat","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.bb6cf443.chunk.js","sourcesContent":["import reducer from './reducer';\nexport default {\n  default: reducer,\n}\n","export default (state = 0, action) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n}\n","import React from 'react'\nimport {Navbar, Nav, NavItem, FormControl} from 'react-bootstrap'\nimport { push } from 'react-router-redux'\nimport {connect} from 'react-redux'\nimport {Link } from \"react-router-dom\";\n\nclass NavigationBar extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      input: '',\n      redirect: false,\n    };\n  }\n  componentWillMount() {\n    this.setState({redirect: false});\n  }\n\n  render() {\n    return (\n      <Navbar inverse collapseOnSelect staticTop>\n        <Navbar.Header>\n          <Navbar.Brand>\n            <Link to={process.env.PUBLIC_URL}>ETH Notebook</Link>\n          </Navbar.Brand>\n          <Navbar.Toggle />\n        </Navbar.Header>\n        <Navbar.Collapse>\n          <Nav pullRight>\n            <NavItem eventKey={1} href=\"#\">\n              <FormControl\n                type=\"text\"\n                placeholder=\"Enter Transaction ID\"\n                value={this.state.input}\n                onChange={e=>this.setState({input: e.target.value})}\n                onKeyUp={e=>{\n                  if(e.key==='Enter'){\n                    this.props.dispatch(\n                      push(process.env.PUBLIC_URL + '/tx/'+this.state.input)\n                    );\n                  }\n                }}\n              />\n            </NavItem>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    );\n  }\n}\n\nexport default connect()(NavigationBar);\n","import React from 'react';\n\nimport { Panel, Col, Jumbotron, Button, Modal} from 'react-bootstrap';\nimport { push } from 'react-router-redux'\nimport {connect} from 'react-redux';\nimport '../css/markdown.css'\nimport '../css/MarkdownEditor.css';\n\nconst Markdown = require('react-markdown');\nconst Web3 = require('web3');\n\nconst initialSource = `\n# ETH-notebook\n# 以太坊记事本\n\n没人删的掉的记事本\n\nPut what you want to share into the textbox and put it into the ETH network.\nNobody can remove the message.\n\nShare the message to the world.\n\nAny questions, email to [ethnotebook@gmail.com](mailto:ethnotebook@gmail.com)\n\n* Markdown language supported and recommended\n* An example: [Click](/tx/0x4cf8de58a27f5e0e23c54d307d6279b977d4ea907878570d20551b2c89cc29da)\n* Disclaimer: All the data are stored in ETH blockchain and owned by the sender of the transaction. This site is only a tool to display the content of transactions and won't be responsible for any issues caused by the content.\n## Codeblock?\n\n\\`\\`\\`\ndef helloWorld():\n  print(\"Hello World!\")\n\\`\\`\\`\n\n## Tables?\n\n| Feature | Support |\n| ------ | ----------- |\n| tables | ✔ |\n| alignment | ✔ |\n| wewt | ✔ |\n\n`\n\nconst web3 = new Web3(Web3.givenProvider);\n\nvar hexEncode = function(text){\n  text = unescape(encodeURIComponent(text))\n  var digits = \"0123456789ABCDEF\"\n  var hex = \"\"\n  let i,hc,lc;\n  for (i = 0; i < text.length; i++) {\n      hc = (text.charCodeAt(i) >>> 4) & 0x0F\n      lc = text.charCodeAt(i) & 0x0F\n      hex += digits[hc]\n      hex += digits[lc]\n  }\n  return hex\n}\n\nclass MarkdownEditor extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this._onChange = this._onChange.bind(this);\n    this.state = {\n      display: initialSource,\n      modal_body: '',\n      modal_show: false,\n      modal_title: '',\n    };\n  }\n\n  _onChange(event) {\n    event.preventDefault();\n    var text = event.target.value ? event.target.value : initialSource\n    this.setState({ display: text })\n  };\n\n  genTransaction = () => {\n    web3.eth.getAccounts((error, accounts) => {\n      if(!accounts || !accounts[0]) {\n        this.setState({\n          modal_title:'Please Unlock Your Account or Add an Account to MetaMask',\n          modal_body: <p>You need to send a ETH transaction to publish the note</p>,\n          modal_show: true,\n        });\n        return;\n      }\n\n      let data = hexEncode(this.state.display);\n      web3.eth.estimateGas({\n        to: \"0x2D7Cca4b6103fC5b3Fdb5c66F9a649ab038a3DA9\",\n        data: data\n      }, ((err,gas) => {\n        web3.eth.sendTransaction({\n          from: accounts[0],\n          value: web3.utils.toWei('0.005', 'ether'),\n          // Dan!\n          to: '0x2D7Cca4b6103fC5b3Fdb5c66F9a649ab038a3DA9',\n          gas: gas,\n          data: data,\n        }, (err, hash)=> {\n          if(err) {\n            this.setState({\n              modal_title:'Error',\n              modal_body: <p>{err.message}</p>,\n              modal_show: true,\n            });\n            return;\n          } else {\n            this.setState({\n              modal_title:'Success',\n              modal_body: <div>\n                <p>Your transaction has been sent. Please wait until your transaction be mined.</p>\n                <p>Once the transaction is mined, you can check your note here:</p>\n                <p>Check your transaction status:</p>\n                <p><a target=\"_blank\" href={'https://etherscan.io/tx/'+hash}>{'https://etherscan.io/tx/'+hash}</a></p>\n                <Button onClick={e=> this.props.dispatch(push(process.env.PUBLIC_URL + '/tx/'+hash))}>View my note</Button>\n                <p>Share the note with this link</p>\n                <p>{'http://ethnotebook.com/tx/'+hash}</p>\n              </div>,\n              modal_show: true,\n            });\n          }\n        });\n      }))\n    })\n  }\n\n  _getInputPanel = () => {\n    if(web3.currentProvider) {\n      return (\n        <Panel>\n          <Panel.Heading className=\"clearfix\">Input your message here:\n              <Button className=\"pull-right\" bsStyle=\"primary\" onClick={e=>this.genTransaction()}>Publish</Button>\n          </Panel.Heading>\n          <Panel.Body>\n            <textarea\n              id=\"noter-text-area\"\n              className=\"textarea\"\n              rows=\"25\"\n              name=\"textarea\"\n              placeholder=\"Type your text in markdown.\"\n              onChange={this._onChange}>\n            </textarea>\n          </Panel.Body>\n        </Panel>\n      );\n    } else {\n      return (\n        <Panel>\n          <Panel.Heading>Please Install MetaMask</Panel.Heading>\n          <Panel.Body>\n            <h3>To publish a note, you need to send an ETH transaction, which requires MetaMask Installed</h3>\n            <a href=\"https://metamask.io\"><img alt=\"metamask\" style={{width: '100%'}} src=\"download-metamask.png\" /></a>\n          </Panel.Body>\n        </Panel>\n      )\n    }\n\n  }\n\n  handleClose = () => {\n    this.setState({\n      modal_show: false,\n      modal_body: '',\n      modal_title: '',\n    })\n  }\n  render() {\n    return (\n      <div>\n        <Col sm={6} md={6}>\n          {this._getInputPanel()}\n        </Col>\n        <Col sm={6} md={6}>\n          <Panel>\n            <Panel.Heading>Your text will be:</Panel.Heading>\n            <Panel.Body>\n              <Jumbotron className=\"markdown-display\">\n                <Markdown\n                  source={this.state.display}\n                  skipHtml={false}\n                  escapeHtml={false}\n                />\n              </Jumbotron>\n            </Panel.Body>\n          </Panel>\n        </Col>\n        <Modal show={this.state.modal_show} onHide={this.handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>{this.state.modal_title}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            {this.state.modal_body}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={this.handleClose}>Close</Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default connect()(MarkdownEditor);\n","import React from 'react'\nimport MarkdownEditor from './MarkdownEditor.react.js'\nimport {Jumbotron} from 'react-bootstrap'\n\nclass Home extends React.Component {\n  render() {\n    return (\n      <div>\n        <Jumbotron>\n          <h1>A Decentralized Notebook</h1>\n          <p>\n            Write and share your notes on Ethereum network. Nobody can modify or take it down.\n          </p>\n        </Jumbotron>\n        <MarkdownEditor />\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react'\nimport '../css/Reader.css'\nimport '../css/markdown.css'\nimport {Col, Row} from 'react-bootstrap';\nimport Disqus from 'disqus-react';\n\nconst Markdown = require('react-markdown');\nconst Web3 = require('web3');\n\nvar web3 = new Web3(Web3.givenProvider);\nif(!web3.currentProvider) {\n  web3 = new Web3(new Web3.providers.HttpProvider('https://mainnet.infura.io/zlPxlGZa5NUkLUBHtUVl'));\n}\n\nfunction hex2utf8(hex) {\n  hex = hex.toUpperCase()\n  if (hex.length % 2)\n      return \"\"\n  var digits = \"0123456789ABCDEF\"\n  var text = \"\"\n  let i, hc,lc,cc;\n  for (i = 0; i < hex.length; i += 2) {\n      hc = digits.indexOf(hex[i])\n      lc = digits.indexOf(hex[i+1])\n      if (hc < 0 || lc < 0)\n          return \"\";\n      cc = (hc << 4) + lc\n      text += String.fromCharCode(cc)\n  }\n  text = decodeURIComponent(escape(text));\n  return text\n}\n\nclass Reader extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      content: '',\n    }\n  }\n  componentWillReceiveProps(newProps) {\n    web3.eth.getTransaction(newProps.match.params.txid, (err,transaction) => {\n      if(!transaction){\n        this.setState({content: 'No transaction found'});\n        return;\n      }\n      var hex  = transaction.input.toString().substring(2);\n      // let str = decodeURIComponent(hex.replace(/\\s+/g, '').replace(/[0-9a-f]{2}/g, '%$&'));\n      this.setState({content: hex2utf8(hex)});\n    });\n  }\n  componentWillMount() {\n    web3.eth.getTransaction(this.props.match.params.txid, (err,transaction) => {\n      if(!transaction){\n        this.setState({content: 'No transaction found'});\n        return;\n      }\n      var hex  = transaction.input.toString().substring(2);\n      this.setState({content: hex2utf8(hex)});\n    });\n  }\n\n  render() {\n    const disqusShortname = 'ethnotebook';\n    const disqusConfig = {\n        url: window.location.href,\n        identifier: this.props.match.params.txid,\n        title: this.props.match.params.txid,\n    };\n    return (\n      <div>\n        <Row>\n          <Col xs={10} sm={8} smOffset={2} xsOffset={1}>\n            <Markdown\n              className=\"reader\"\n              source={this.state.content}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={10} sm={8} smOffset={2} xsOffset={1}>\n            <Disqus.DiscussionEmbed shortname={disqusShortname} config={disqusConfig} />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\nexport default Reader;\n","import React, { Component } from 'react';\nimport { createStore, combineReducers, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport { Route} from \"react-router-dom\"\nimport reducers from './reducers/reducers'\nimport NavigationBar from './components/NavigationBar.react.js'\nimport Home from './components/Home.react.js'\nimport Reader from './components/Reader.react.js'\nimport './css/App.css';\nimport createHistory from 'history/createBrowserHistory'\nimport { ConnectedRouter, routerReducer, routerMiddleware } from 'react-router-redux'\n\n// Create a history of your choosing (we're using a browser history in this case)\nconst history = createHistory()\n\n// Build the middleware for intercepting and dispatching navigation actions\nconst middleware = routerMiddleware(history)\n\n// Add the reducer to your store on the `router` key\n// Also apply our middleware for navigating\nconst store = createStore(\n  combineReducers({\n    ...reducers,\n    router: routerReducer\n  }),\n  applyMiddleware(middleware)\n)\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <ConnectedRouter history={history}>\n        <div className=\"App\">\n          <NavigationBar />\n            <div>\n              <Route\n                path={process.env.PUBLIC_URL + '/'}\n                exact={true}\n                component={Home}\n              />\n              <Route\n                path={process.env.PUBLIC_URL + '/tx/:txid'}\n                exact={true}\n                component={Reader}\n              />\n            </div>\n        </div>\n      </ConnectedRouter>\n\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}